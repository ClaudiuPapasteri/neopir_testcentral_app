[{"name":"app.R","content":"## NEO PI-R APP for TESTCENTRAL scoring (v.13) \r\n# GH Gist 7f716a3de9f07ed05cd20a417a1cedf4\r\n# Suporta datele in format: 1) TD,D,N,A,TA  2) td,d,n,a,ta  3) 0,1,2,3,4 \r\n# Transforma in 1,2,3,4 si - pt date lipsa\r\n\r\nlibrary(shiny)\r\nlibrary(dplyr)\r\nlibrary(rhandsontable)\r\nlibrary(DT)\r\nlibrary(caroline)\r\n\r\n##################################### Fix Download Button #####################################\r\n\r\n# Workaround for Chromium Issue 468227    # dropped because downloadHandler doesnt work properly in shiny live\r\n# https://shinylive.io/r/examples/#r-file-download\r\ndownloadButton <- function(...) {\r\n  tag <- shiny::downloadButton(...)\r\n  tag$attribs$download <- NULL\r\n  tag\r\n}\r\n\r\n\r\n##################################### DF for Hottable #####################################\r\nmake_DF <- function(n) {\r\n    DF <- data.frame(matrix(ncol = 241, nrow = n))\r\n    DF <- as_tibble(DF)\r\n    names <- c(\"Nume\", c(sprintf(\"i%01d\", seq(1,240))))\r\n    colnames(DF) <- names\r\n    DF$Nume <- as.character(DF$Nume)\r\n    DF[,2:241] = apply(DF[,2:241], 2, function(x) as.character(x));\r\n    return(DF)\r\n}\r\n\r\n\r\n##########################################################################################\r\n####################################### UI ###############################################\r\nui <- fluidPage(\r\n  \r\n  \r\n  titlePanel(\"App NEO PI-R\"),\r\n  \r\n  tabsetPanel(type = \"tabs\",\r\n              tabPanel(\"Inserare Date\",\r\n                       br(),\r\n                       sliderInput(\"nrDF\", \"Numar de randuri in baza de date:\",\r\n                                   min = 0, max = 500,\r\n                                   value = 30),\r\n                       br(),\r\n                       rHandsontableOutput(\"hotable1\"), \r\n                       br()\r\n              ), \r\n              \r\n              tabPanel(\"Date Calcul\", \r\n                       br(),\r\n                       DT::dataTableOutput('tbl'),\r\n                       br(),\r\n                       downloadButton(\"downloadData\", \"Download\")\r\n              )\r\n              \r\n  )\r\n)\r\n\r\n\r\n##########################################################################################\r\n########################################### SERVER #######################################\r\nserver <- function(input, output, session) {\r\n  \r\n  \r\n  values <- reactiveValues()\r\n  \r\n  observe({\r\n    values$DF <- make_DF(input$nrDF)\r\n  })\r\n  \r\n#################################### Render Hotttable ####################################\r\n  \r\n  output$hotable1 <- renderRHandsontable({ rhandsontable(values$DF, height = 700, selectCallback = TRUE, readOnly = FALSE) })\r\n  \r\n  dbhotable <-  reactive({\r\n    if(is.null(input$hotable1)){return(values$DF)}\r\n    else if(!identical(values$DF,input$hotable1)){\r\n      as.data.frame(hot_to_r(input$hotable1))\r\n    }\r\n  })\r\n  \r\n####################################### Recode ###########################################\r\n  \r\n  ### TEST CENTRAL (codare 1-5)\r\n  transform <- reactive({\r\n    ScMan <- dbhotable()\r\n    indexItemiNEO <- colnames(ScMan[ ,c(2:241)])\r\n      \r\n    ScMan <- \r\n      ScMan %>%\r\n        dplyr::mutate_at(vars(indexItemiNEO), \r\n                  list(\r\n                    ~dplyr::case_when(\r\n                      . %in%  c(\"TD\", \"td\", \"0\") ~ \"1\",\r\n                      . %in%  c(\"D\", \"d\", \"1\") ~ \"2\",\r\n                      . %in%  c(\"N\", \"n\", \"2\") ~ \"3\",\r\n                      . %in%  c(\"A\", \"a\", \"3\") ~ \"4\",\r\n                      . %in%  c(\"TA\", \"ta\", \"4\") ~ \"5\",\r\n                      . %in%  c(\"NA\", \"na\") ~ \"-\",\r\n                      TRUE ~ \"-\"\r\n                    )\r\n                  )\r\n        )\r\n    \r\n    ScMan\r\n    \r\n  }) \r\n  \r\n\r\n  output$tbl = DT::renderDataTable(server = FALSE,  # server=FALSE ca sa save tot tabelul, nu doar ce vede clientul\r\n    datatable(data = transform(), \r\n              extensions = 'Buttons', \r\n              options = list(\r\n                dom = 'lfrtBp',                   # lBfrtip e ok, dar inlocuim i cu B pt e inutil\r\n                buttons = c('csv', 'excel')\r\n              ) \r\n    )\r\n  )\r\n  \r\n  \r\n  # Downloadable .txt \r\n  output$downloadData <- downloadHandler(\r\n    filename = paste(\"NEO PI-R Ap \", gsub(\":\", \"-\", format(Sys.time(), \"%d-%b-%Y %H.%M\")),\".txt\",sep=\"\"),\r\n    content = function(file) {\r\n      caroline::write.delim(transform(), file, row.names = FALSE, sep = \"\")\r\n    }\r\n  )\r\n  \r\n\r\n}\r\n\r\n #########################################################################################\r\n\r\n shinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"LICENSE","content":"MIT License\r\n\r\nCopyright (c) 2024 Claudiu Papasteri\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","type":"text"},{"name":"README.md","content":"# neopir_testcentral_app\r\n\r\nBatch convert and export NEO PI-R records to *testcentral.ro* required strings.\r\n\r\n<https://claudiupapasteri.github.io/neopir_testcentral_app/>\r\n\r\nRun locally:\r\n\r\n```{r, eval=FALSE}\r\nshiny::runGist(\"7f716a3de9f07ed05cd20a417a1cedf4\")\r\n```\r\n","type":"text"},{"name":"neopir_testcentral_app.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"},{"name":"run_shinylive.R","content":"app_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)\r\n\r\nshinylive::export(app_dir, \"docs\")  # use this output folder for Github Pages deploy\r\n\r\n# httpuv::runStaticServer(\"docs\")","type":"text"}]
